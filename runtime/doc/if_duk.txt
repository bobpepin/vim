*if_duk.txt*   For Vim version 8.1.  Last change: 2019 Feb 25


		  VIM REFERENCE MANUAL    by Bob Pepin


The Duktape JavaScript Interface to Vim		*duktape* *Duktape*

1. Commands					|duktape-commands|
2. The Module system 				|duktape-modules|
3. The high-level API				|duktape-vim|
4. The low-level API				|duktape-lowlevel|
5. dukcall() Vim function			|duktape-dukcall|

{Vi does not have any of these commands}

The Duktape interface is available only when Vim was compiled with the
|+duktape| feature.

==============================================================================
1. Commands						*duktape-commands*

							*:duktape* *:duk*
:[range]duk[tape] {code}
			Evaluate the ECMAScript source code {code}.  
			A simple check if the `:duktape` command is working: >
				:duktape msg("Hello, World!")
<
							*:dukfile* *:dukf*
:[range]dukf[ile] {file}
			Execute the ECMAScript code in {file}.  The whole
			argument is used as a single file name.  {not in Vi}


Here are some examples					*duktape-examples*  >

	:duk var line = getline(".")
	:duk setline(".", line.toLowerCase()) 
	:duk msg("Vim version: " + $v.version)
	:duk $b.changedtick

(Note that variable assignments persist from one command to the next. All
duktape commands are executed in the same interpreter context.)

==============================================================================
2. The Vim ECMAScript Module system			 *duktape-modules*

The Duktape API supports a Node.js-style module system.

require(fname)
	Searches for a file fname in runtimepath and, if found, performs the
	following actions:
	1. If the file has previously been loaded by require, skip the
	   remaining steps.
	2. Call the ECMAScript function >
		function (module, exports, filename) { <contents of fname> }
<	   with exports bound to an ECMAScript object to be populated.
	3. Return the exports object

==============================================================================
3. The high-level API						*duktape-vim*

This API mirrors the Vim Script API and is implemented using the functions
described further down in the section on the low-level API. The implementation
is contained in the file if_duktape.js which is part of the Vim-with-Duktape
runtime.  

It provides the global objects $b, $g, $t, $v and $w that correspond to the
Vim script namespaces b:, g:, t:, v: and w:. Examples: >

	:duk $b.changedtick    	// Access buffer variable
	:duk $g.foo = 1        	// Set value of global variable
	:echo g:foo           	// Check that value is visible to Vim
	:duk delete $g.foo     	// Delete global variable
	:echo g:foo		// E121: Undefined variable: g:foo
	:duk $v.version         // Access vim-internal variables
	
Options can be accessed as properties of the $o object: >

	:duk $o.rtp		// Get value of runtimepath
	:duk $o.syntax = "off"  // Set option value

All Vim script builtin functions except eval have ECMAScript wrappers with the
same name. Vim script eval is accessed as vim_eval, since it clashes with the
ECMAScript eval function. Examples: >

	:duk var l = bufname(0); append(".", "Buffer name: "+l)   
	:duk vim_eval("&rtp")

Ex commands are executed through the ex function. Example: >

	:duk ex("set cindent")
	:duk ex("normal ddGp")	// Move current line to end of buffer

==============================================================================
4. The low-level API					*duktape-lowlevel*

At the lowest level, the Vim ECMAScript API exposes the following four
functions from the Vim C API to ECMAScript code:

msg(arg)						*duktape-msg*
	Converts message to a string and outputs it in the Vim status line.
	Returns undefined.
	Examples: >
	    :duk msg("Hello")
<
read_blob(filename)					*duktape-read-blob*
	Reads a file.  Returns a Duktape Buffer with the contents of filename.
	Examples: >
	    :duk var data = read_blob("/path/to/file")
<
do_cmdline_cmd(cmd) 					*duktape-do-cmdline-cmd*
	Executes the vim (ex-mode) command cmd.  Returns undefined.
	Examples: >
	    :duk do_cmdline_cmd("set tw=72")

call_internal_func(func, args) 			*duktape-call-internal-func*
	Executes the vim-script builtin function func (a string) with the
	arguments given in the list args and returns the result.  The only
	supported data types are strings and integers.

	Examples: >
	    :duk var text_width = call_internal_func("eval", ["&tw"])

==============================================================================
5. dukcall() Vim function				*dukcall*

To facilitate bi-directional interface, you can use the |dukcall()| function
in Vim scripts to call ECMAScript functions and pass their values to Vim
script.  

dukcall(func, arglist)
	Looks up func (a string) in the ECMAScript global object, calls it
	with the arguments in arglist and returns the result.  The supported
	data types for arguments and return values are limited to strings and
	integers.

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
